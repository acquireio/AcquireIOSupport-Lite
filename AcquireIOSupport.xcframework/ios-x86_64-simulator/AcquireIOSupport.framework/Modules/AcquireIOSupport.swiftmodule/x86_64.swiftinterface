// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AcquireIOSupport
import AVFoundation
@_exported import AcquireIOSupport
import CoreData
import Foundation
import MobileCoreServices
import ObjectiveC
import Photos
import SafariServices
import SocketIO
import Swift
import SystemConfiguration
import UIKit.UIFont
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AcquireIOConfig : ObjectiveC.NSObject {
  @objc public static let config: AcquireIOSupport.AcquireIOConfig
  @objc final public var buttonImageName: Swift.String {
    get
  }
  @objc final public var themeOptions: [Swift.String : Any] {
    get
  }
  @objc final public var showThreadList: Swift.Bool {
    get
  }
  @objc final public var showChatButton: Swift.Bool {
    get
  }
  @objc final public var showVideoButton: Swift.Bool {
    get
  }
  @objc final public var showAudioButton: Swift.Bool {
    get
  }
  @objc final public var showLocalNotificationInApp: Swift.Bool {
    get
  }
  @objc final public var disableAttachment: Swift.Bool {
    get
  }
  @objc final public var sessionConnectAndStartAuto: Swift.Bool {
    get
  }
  @objc final public var isHideNewChat: Swift.Bool {
    get
  }
  @objc final public var disableNetworkMessage: Swift.Bool {
    get
  }
  @objc final public func setDict(_ dict: [Swift.String : Any])
  @objc deinit
}
extension UIFont {
  public static let loadAcquireIOSupportFonts: ()
}
@objc public enum ChannelType : Swift.Int {
  case chat = 1
  case audio = 2
  case video = 3
  public init(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIView {
  public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: AcquireIOSupport.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: AcquireIOSupport.ToastStyle = ToastManager.shared.style, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreGraphics.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: AcquireIOSupport.ToastStyle = ToastManager.shared.style, completion: ((Swift.Bool) -> Swift.Void)?)
  public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: AcquireIOSupport.ToastPosition = ToastManager.shared.position, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreGraphics.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func hideToast()
  public func hideToast(_ toast: UIKit.UIView)
  public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  public func clearToastQueue()
  public func makeToastActivity(_ position: AcquireIOSupport.ToastPosition)
  public func makeToastActivity(_ point: CoreGraphics.CGPoint)
  public func hideToastActivity()
  public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: AcquireIOSupport.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreGraphics.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreGraphics.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreGraphics.CGFloat
  public var verticalPadding: CoreGraphics.CGFloat
  public var cornerRadius: CoreGraphics.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreGraphics.CGFloat
  public var shadowOffset: CoreGraphics.CGSize
  public var imageSize: CoreGraphics.CGSize
  public var activitySize: CoreGraphics.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public static let shared: AcquireIOSupport.ToastManager
  public var style: AcquireIOSupport.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: AcquireIOSupport.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: AcquireIOSupport.ToastPosition, b: AcquireIOSupport.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum StartChannelType : Swift.Int {
  case audio = 0
  case video
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AcquireIOAgentStatus : Swift.Int {
  case online = 0
  case offline
  case invisible
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AcquireIOConnectionStatus : Swift.Int {
  case notConnected = 0
  case disconnected
  case connecting
  case connected
  case sessionStarted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AcquireIOInteractionEventType : Swift.Int {
  case audioCallStarted = 0
  case videoCallStarted
  case audioCallAnswered
  case videoCallAnswered
  case callDeclined
  case callAutoDeclined
  case callerViewMinimize
  case callerViewMaximize
  case callerViewCameraSwitchToFront
  case callerViewCameraSwitchToBack
  case callSpeakerOn
  case callSpeakerOff
  case callMute
  case callUnmute
  case callVideoOn
  case callVideoOff
  case callDisconnected
  case conversationStart
  case conversationEnd
  case conversationFeedbackSubmit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AcquireIODelegate {
  @objc func didChangeConnectionStatus(status: AcquireIOSupport.AcquireIOConnectionStatus)
  @objc func didChangeAgentStatus(agentID: Swift.String, andStatus status: AcquireIOSupport.AcquireIOAgentStatus)
  @objc func onError(error: Swift.Error)
  @objc func hideSupport()
  @objc func didReceiveTriggerEvent(_ eventName: Swift.String)
  @objc func didUserInteracted(withEvent type: AcquireIOSupport.AcquireIOInteractionEventType, withData data: [Swift.String : Any]?)
  @objc func didReceiveNewMessage(_ message: Any)
}
extension AcquireIODelegate {
  public func didChangeConnectionStatus(status: AcquireIOSupport.AcquireIOConnectionStatus)
  public func didChangeAgentStatus(agentID: Swift.String, andStatus status: AcquireIOSupport.AcquireIOAgentStatus)
  public func hideSupport()
  public func onError(error: Swift.Error)
  public func didReceiveTriggerEvent(_ eventName: Swift.String)
  public func didUserInteracted(withEvent type: AcquireIOSupport.AcquireIOInteractionEventType, withData data: [Swift.String : Any]?)
  public func didReceiveNewMessage(_ message: Any)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AcquireIO : ObjectiveC.NSObject {
  @objc public static let support: AcquireIOSupport.AcquireIO
  @objc final public var delegate: AcquireIOSupport.AcquireIODelegate?
  @objc final public func setAccount(_ accountUID: Swift.String, domain: Swift.String = "acquire.io", withOptions optionDictionary: AcquireIOSupport.AcquireIOConfig?)
  @objc deinit
}
extension AcquireIO {
  @objc final public func showSupport(_ viewController: UIKit.UIViewController)
  @objc final public func showSupport(_ viewController: UIKit.UIViewController, withMessage message: Swift.String)
  @objc final public func startSession()
  @objc final public func startDirectSupportChat(type: AcquireIOSupport.ChannelType)
  @objc final public func setVisitorHash(_ visitorHash: Swift.String)
  @objc final public func getVisitorId() -> Swift.String
  @objc final public func setVisitorDetails(_ data: [Swift.String : Any])
  @objc final public func setVisitorIdentityFields(_ data: [Swift.String : Any])
  @objc final public func logoutVisitor()
  @objc final public func getAvailableAgentCount() -> Swift.Int
  @objc final public func getOnlineAgentIDs() -> [Foundation.NSNumber]
}
extension AcquireIO {
  @objc final public func dismissChatSupport()
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.AIOreachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension UIDevice {
  public var type: AcquireIOSupport.Model {
    get
  }
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIViewController {
  @objc override dynamic open func awakeFromNib()
}
@_inheritsConvenienceInitializers @objc(CDMessage) public class CDMessage : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CDMessage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AcquireIOSupport.CDMessage>
  @objc @NSManaged dynamic public var caseId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateCreated: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rawData: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var seen: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var threadId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var thread: AcquireIOSupport.CDThread? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(CDThread) public class CDThread : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CDThread {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AcquireIOSupport.CDThread>
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastMessage: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rawdata: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var threadId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userDict: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var messages: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension CDThread {
  @objc(addMessagesObject:) @NSManaged dynamic public func addToMessages(_ value: AcquireIOSupport.CDMessage)
  @objc(removeMessagesObject:) @NSManaged dynamic public func removeFromMessages(_ value: AcquireIOSupport.CDMessage)
  @objc(addMessages:) @NSManaged dynamic public func addToMessages(_ values: Foundation.NSSet)
  @objc(removeMessages:) @NSManaged dynamic public func removeFromMessages(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(CDVisitorData) public class CDVisitorData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CDVisitorData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AcquireIOSupport.CDVisitorData>
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var myselfData: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rawData: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var token: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedOn: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension AcquireIOSupport.ChannelType : Swift.Equatable {}
extension AcquireIOSupport.ChannelType : Swift.Hashable {}
extension AcquireIOSupport.ChannelType : Swift.RawRepresentable {}
extension AcquireIOSupport.ToastPosition : Swift.Equatable {}
extension AcquireIOSupport.ToastPosition : Swift.Hashable {}
extension AcquireIOSupport.StartChannelType : Swift.Equatable {}
extension AcquireIOSupport.StartChannelType : Swift.Hashable {}
extension AcquireIOSupport.StartChannelType : Swift.RawRepresentable {}
extension AcquireIOSupport.AcquireIOAgentStatus : Swift.Equatable {}
extension AcquireIOSupport.AcquireIOAgentStatus : Swift.Hashable {}
extension AcquireIOSupport.AcquireIOAgentStatus : Swift.RawRepresentable {}
extension AcquireIOSupport.AcquireIOConnectionStatus : Swift.Equatable {}
extension AcquireIOSupport.AcquireIOConnectionStatus : Swift.Hashable {}
extension AcquireIOSupport.AcquireIOConnectionStatus : Swift.RawRepresentable {}
extension AcquireIOSupport.AcquireIOInteractionEventType : Swift.Equatable {}
extension AcquireIOSupport.AcquireIOInteractionEventType : Swift.Hashable {}
extension AcquireIOSupport.AcquireIOInteractionEventType : Swift.RawRepresentable {}
extension AcquireIOSupport.Model : Swift.Equatable {}
extension AcquireIOSupport.Model : Swift.Hashable {}
extension AcquireIOSupport.Model : Swift.RawRepresentable {}
